apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: danaos
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      component: core
  template:
    metadata:
      labels:
        app: grafana
        component: core
    spec:
      enableServiceLinks: false
      containers:
      - image: grafana/grafana:6.4.4
        name: grafana
        imagePullPolicy: IfNotPresent
        # env:
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
          # The following env variables set up basic auth twith the default admin user and admin password.
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "false"
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          - name: GF_USERS_VIEWERS_CAN_EDIT
            value: "true"
          - name: GF_SECURITY_ADMIN_USER
            value: "admin"
          - name: GF_SECURITY_ADMIN_PASSWORD
            value: "admin_datatom"
          - name: GF_DATABASE_URL
            value: "postgres://danaos:db_password@stolon-proxy-service:5432/grafana"
        readinessProbe:
          httpGet:
            path: /login
            port: 3000
          # initialDelaySeconds: 30
          # timeoutSeconds: 1
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: danaos
  labels:
    app: grafana
spec:
  type: NodePort
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 31005
  selector:
    app: grafana
    component: core
  externalIPs:
  # - "{VIP}"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-init
  namespace: danaos
spec:
  template:
    metadata:
      name: grafana-init
    spec:
      restartPolicy: OnFailure
      nodeSelector:
        node-role.kubernetes.io/master: ""
      containers:
      - name: grafana-init
        image: alpine-curl:v1.0
        command: ["/bin/sh", "-c"]
        workingDir: /opt/grafana-init
        args:
          - >
            set -e;
            echo "waiting for grafana start" ;
            sleep 10;
            while [ $(curl -m10 -Lsw '%{http_code}' "http://grafana:3000" -o /dev/null) -ne 200 ]; do
              echo '.'
              sleep 5;
            done

            echo "create user datatom" &&
            echo '{"name":"datatom","password":"datatom.com","login":"datatom"}' \
            | curl -m20 --silent --fail --show-error \
              --request POST http://admin:admin_datatom@grafana:3000/api/admin/users \
              --header "Content-Type: application/json" \
              --data-binary "@-" ;
            echo "" ;

            for file in *-datasource.json ; do
              if [ -e "$file" ] ; then
                echo "importing $file" &&
                curl -m20 --silent --fail --show-error \
                  --request POST http://admin:admin_datatom@grafana:3000/api/datasources \
                  --header "Content-Type: application/json" \
                  --data-binary "@$file" ;
                echo "" ;
              fi
            done ;

            for file in *-dashboard.json ; do
              if [ -e "$file" ] ; then
                echo "importing $file" &&
                echo '{"dashboard":'"$(cat $file)"',"overwrite":true,"folderId":0,"inputs":[]}' | \
                curl -m20 --silent --fail --show-error \
                  --request POST http://admin:admin_datatom@grafana:3000/api/dashboards/import \
                  --header "Content-Type: application/json" \
                  --data-binary "@-" ;
                echo "" ;
              fi
            done ;
        volumeMounts:
        - name: config-volume
          mountPath: /opt/grafana-init
      volumes:
      - name: config-volume
        configMap:
          name: grafana-init
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-init
  namespace: danaos
data:
  prometheus-datasource.json: |
    {
      "name": "prometheus",
      "type": "prometheus",
      "url": "http://prometheus:9090",
      "access": "proxy",
      "basicAuth": false
    }
{{ (.Files.Glob "dashboards/*").AsConfig | indent 2 }}
