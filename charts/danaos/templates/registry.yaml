apiVersion: v1
kind: ConfigMap
metadata:
  namespace: danaos
  name: registry-config
data:
  config.yml: |
    version: 0.1
    log:
      fields:
        service: registry
    auth:
      token:
        realm: token-realm
        service: danaos
        issuer: "danaos_auth"
        rootcertbundle: /etc/danaos/public.crt
        autoredirect: true
    storage:
      cache:
        blobdescriptor: inmemory
      filesystem:
        rootdirectory: /var/lib/registry
      delete:
        enabled: true
    http:
      addr: :80
      headers:
        X-Content-Type-Options: [nosniff]
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
    notifications:
      endpoints:
        - name: archer
          disabled: false
          headers:
              Authorization: [Bearer danaos-registry-event-callback-token]
          url: http://archer-service:5001/api/registry/events
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: danaos
  name: registry
  labels:
    name: distribution
spec:
  selector:
    matchLabels:
      name: distribution
  replicas: 1
  serviceName: distribution
  template:
    metadata:
      labels:
        name: distribution
    spec:
      enableServiceLinks: false
      nodeSelector:
        node-role.kubernetes.io/master: ""
      containers:
        - name: distribution
          image: registry:2.7.1-1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
              name: http
          volumeMounts:
            - name: registry-volume
              mountPath: /var/lib/registry
            - name: registry-config
              mountPath: /etc/docker/registry
            - name: public-cert
              mountPath: /etc/danaos
      volumes:
        - name: registry-config
          configMap:
            name: registry-config
        - name: public-cert
          secret:
            secretName: danaos-certs
            items:
              - key: public.crt
                path: public.crt
  volumeClaimTemplates:
    - metadata:
        name: registry-volume
      {{- if .Values.registry.persistence.storageClass }}
      spec:
        storageClassName: {{ .Values.registry.persistence.storageClass }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.registry.persistence.size | quote }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  namespace: danaos
  name: distribution
  labels:
    name: distribution
spec:
  clusterIP: None
  ports:
    - port: 80
      targetPort: 80
  selector:
    name: distribution
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: danaos
  name: registry-nginx-config
data:
  nginx.conf: |
    events {
        worker_connections  1024;
    }

    http {
      upstream archer {
        server archer-service:5001;
      }

      upstream docker-registry {
        server registry-0.distribution;
      }

      ## Set a variable to help us decide if we need to add the
      ## 'Docker-Distribution-Api-Version' header.
      ## The registry always sets this header.
      ## In the case of nginx performing auth, the header is unset
      ## since nginx is auth-ing before proxying.
      map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
        '' 'registry/2.0';
      }

      server {
        listen 80;
        server_name registry.danaos;

        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;

        # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)
        chunked_transfer_encoding on;

        location /v2/ {
          # Do not allow connections from docker 1.5 and earlier
          # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
          if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
            return 404;
          }

          ## If $docker_distribution_api_version is empty, the header is not added.
          ## See the map directive above where this variable is defined.
          add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

          proxy_pass                          http://docker-registry;
          proxy_set_header  Host              $http_host;   # required for docker client's sake
          proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
          proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
          proxy_set_header  X-Forwarded-Proto $scheme;
          proxy_read_timeout                  900;
        }

        location /auth/token {
          proxy_pass http://archer/api/registry/auth;
        }
      }

      server {
        listen 443 ssl;
        server_name registry.danaos;

        # SSL
        ssl_certificate /etc/danaos/public.crt;
        ssl_certificate_key /etc/danaos/private.key;

        # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;

        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;

        # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)
        chunked_transfer_encoding on;

        location /v2/ {
          # Do not allow connections from docker 1.5 and earlier
          # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
          if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
            return 404;
          }

          ## If $docker_distribution_api_version is empty, the header is not added.
          ## See the map directive above where this variable is defined.
          add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

          proxy_pass                          http://docker-registry;
          proxy_set_header  Host              $http_host;   # required for docker client's sake
          proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
          proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
          proxy_set_header  X-Forwarded-Proto $scheme;
          proxy_read_timeout                  900;
        }

        location /auth/token {
          proxy_pass http://archer/api/registry/auth;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry-nginx
  namespace: danaos
  labels:
    name: registry-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      name: registry-nginx
  template:
    metadata:
      labels:
        name: registry-nginx
    spec:
      enableServiceLinks: false
      nodeSelector:
        node-role.kubernetes.io/master: ""
      containers:
        - name: nginx
          image: nginx:1.15.12
          ports:
            - containerPort: 80
              name: http
            - containerPort: 443
              name: https
          volumeMounts:
            - name: certs
              mountPath: "/etc/danaos"
            - name: nginx-config
              mountPath: "/etc/nginx"
      volumes:
        - name: certs
          secret:
            secretName: danaos-certs
        - name: nginx-config
          configMap:
            name: registry-nginx-config
---
apiVersion: v1
kind: Service
metadata:
  namespace: danaos
  name: registry
  labels:
    name: registry-nginx
spec:
  type: NodePort
  ports:
    - port: 80
      name: http
      targetPort: 80
    - port: 443
      name: https
      targetPort: 443
  selector:
    name: registry-nginx
