apiVersion: batch/v1
kind: Job
metadata:
  name: stolon-init
  namespace: danaos
spec:
  template:
    metadata:
      name: stolon-init
    spec:
      restartPolicy: OnFailure
      nodeSelector:
        node-role.kubernetes.io/master: ""
      containers:
      - command:
        - /usr/local/bin/stolonctl
        - --cluster-name=danaos-stolon
        - --store-backend=kubernetes
        - --kube-resource-kind=configmap
        - init
        - -y
        image: sorintlab/stolon:v0.14.0-pg11.6
        name: stolon-init
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: stolon
  namespace: danaos
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - configmaps
  - events
  verbs:
  - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: stolon
  namespace: danaos
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: stolon
subjects:
- kind: ServiceAccount
  name: default
  namespace: danaos
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stolon-sentinel
  namespace: danaos
spec:
  replicas: 2
  selector:
    matchLabels:
      component: stolon-sentinel
      stolon-cluster: danaos-stolon
  template:
    metadata:
      labels:
        component: stolon-sentinel
        stolon-cluster: danaos-stolon
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ""
      containers:
      - name: stolon-sentinel
        image: sorintlab/stolon:v0.14.0-pg11.6
        command:
          - "/bin/bash"
          - "-ec"
          - |
            exec gosu stolon stolon-sentinel
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: STSENTINEL_CLUSTER_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['stolon-cluster']
          - name: STSENTINEL_STORE_BACKEND
            value: "kubernetes"
          - name: STSENTINEL_KUBE_RESOURCE_KIND
            value: "configmap"
          - name: STSENTINEL_METRICS_LISTEN_ADDRESS
            value: "0.0.0.0:8080"
        ports:
          - containerPort: 8080
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: stolon-keeper
  namespace: danaos
spec:
  serviceName: "stolon-keeper"
  replicas: {{ .Values.postgres.replicas }}
  selector:
    matchLabels:
      component: stolon-keeper
      stolon-cluster: danaos-stolon
  template:
    metadata:
      labels:
        component: stolon-keeper
        stolon-cluster: danaos-stolon
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      terminationGracePeriodSeconds: 10
      nodeSelector:
        node-role.kubernetes.io/master: ""
      containers:
      - name: stolon-keeper
        image: sorintlab/stolon:v0.14.0-pg11.6
        command:
          - "/bin/bash"
          - "-ec"
          - |
            # Generate our keeper uid using the pod index
            IFS='-' read -ra ADDR <<< "$(hostname)"
            export STKEEPER_UID="keeper${ADDR[-1]}"
            export POD_IP=$(hostname -i)
            export STKEEPER_PG_LISTEN_ADDRESS=$POD_IP
            export STOLON_DATA=/stolon-data
            chown stolon:stolon $STOLON_DATA
            exec gosu stolon stolon-keeper --data-dir $STOLON_DATA
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: STKEEPER_CLUSTER_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['stolon-cluster']
          - name: STKEEPER_STORE_BACKEND
            value: "kubernetes"
          - name: STKEEPER_KUBE_RESOURCE_KIND
            value: "configmap"
          - name: STKEEPER_PG_REPL_USERNAME
            value: "repluser"
          - name: STKEEPER_PG_REPL_PASSWORD
            value: "replpassword"
          - name: STKEEPER_PG_SU_USERNAME
            value: "{{ .Values.postgres.username }}"
          - name: STKEEPER_PG_SU_PASSWORD
            value: "{{ .Values.postgres.password }}"
          - name: STKEEPER_METRICS_LISTEN_ADDRESS
            value: "0.0.0.0:8080"
        ports:
          - containerPort: 5432
          - containerPort: 8080
        volumeMounts:
        - mountPath: /stolon-data
          name: stolon-data
  volumeClaimTemplates:
    - metadata:
        name: stolon-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: local-path
        resources:
          requests:
            storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stolon-proxy
  namespace: danaos
spec:
  replicas: 2
  selector:
    matchLabels:
      component: stolon-proxy
      stolon-cluster: danaos-stolon
  template:
    metadata:
      labels:
        component: stolon-proxy
        stolon-cluster: danaos-stolon
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ""
      containers:
      - name: stolon-proxy
        image: sorintlab/stolon:v0.14.0-pg11.6
        command:
          - "/bin/bash"
          - "-ec"
          - |
            exec gosu stolon stolon-proxy
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: STPROXY_CLUSTER_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['stolon-cluster']
          - name: STPROXY_STORE_BACKEND
            value: "kubernetes"
          - name: STPROXY_KUBE_RESOURCE_KIND
            value: "configmap"
          - name: STPROXY_LISTEN_ADDRESS
            value: "0.0.0.0"
          - name: STPROXY_METRICS_LISTEN_ADDRESS
            value: "0.0.0.0:8080"
          - name: STPROXY_TCP_KEEPALIVE_IDLE
            value: "600"
          - name: STPROXY_TCP_KEEPALIVE_COUNT
            value: "8"
          - name: STPROXY_TCP_KEEPALIVE_INTERVAL
            value: "75"
        ports:
          - containerPort: 5432
          - containerPort: 8080
        readinessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 10
          timeoutSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: stolon-proxy-service
  namespace: danaos
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    component: stolon-proxy
    stolon-cluster: danaos-stolon
