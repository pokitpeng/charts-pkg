apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: postgres-service
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: postgres-port
              containerPort: 5432
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          env:
          - name: POSTGRES_USER
            value: {{ .Values.pgconf.username }}
          - name: POSTGRES_PASSWORD
            value: {{ .Values.pgconf.password }}
          - name: POSTGRES_DB
            value: {{ .Values.pgconf.database }}
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
          volumeMounts:
          - name: pgdata
            mountPath: /var/lib/postgresql/data/pgdata
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: pgdata
    {{- if .Values.persistence.storageClass }}
    spec:
      storageClassName: "{{ .Values.persistence.storageClass }}"
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
    {{- end }}